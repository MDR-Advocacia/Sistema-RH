services:
  web:
    build: .
    ports:
      - "5000:5000"
    volumes:
      - .:/app
      - uploads_data:/app/uploads
    env_file:
      - .env  # Carrega todas as variáveis do arquivo .env  
    environment:
      - FLASK_APP=run.py
      - FLASK_ENV=development
      # A URL agora é construída com as variáveis do .env
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
    depends_on:
      - db

  db:
    image: postgres:16
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    # O serviço do banco de dados também usa as variáveis para a inicialização
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    env_file:
      - .env  # Carrega as variáveis do banco (POSTGRES_USER, etc.)  

  backup:
    image: postgres:16 # Usamos a mesma imagem para ter acesso ao pg_dump
    volumes:
      - ./scripts:/scripts
      - backups_data:/backups # Mapeia o novo volume onde os backups serão salvos
      #- /D:\Backups\MDRH-BACKUP   
    env_file:
      - .env # Carrega as credenciais do banco
    environment:
      # Diz ao pg_dump para onde se conectar (o nome do serviço do banco)
      - PGHOST=db
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - PGPASSWORD=${POSTGRES_PASSWORD}
    depends_on:
      - db  
    entrypoint: ["/scripts/backup.sh"] # Comando que será executado ao iniciar

volumes:
  postgres_data:
  uploads_data:
  backups_data: # Declara o novo volume para os backups    